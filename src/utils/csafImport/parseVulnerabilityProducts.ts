import {
  TProductStatus,
  TVulnerabilityProduct,
} from '@/routes/vulnerabilities/types/tVulnerabilityProduct'
import { TCSAFDocument } from '../csafExport/csafExport'

export function parseVulnerabilityProducts(
  productStatus: TCSAFDocument['vulnerabilities'][number]['product_status'],
  generateVulnerabilityProduct: () => TVulnerabilityProduct,
): TVulnerabilityProduct[] {
  let vulnerabilityProducts: TVulnerabilityProduct[] = []
  const addVulnerabilityProduct = (
    productId: string,
    status: TProductStatus,
  ) => {
    let previousVP = vulnerabilityProducts.find(
      (x) => x.productId === productId,
    )

    let newVP = previousVP
      ? previousVP
      : { ...generateVulnerabilityProduct(), productId: productId }

    newVP.status = status

    if (!previousVP) {
      vulnerabilityProducts.push(newVP)
    }
  }

  const mapProductStatus = (id: string, status: TProductStatus) => {
    addVulnerabilityProduct(id, status)
  }

  // All Status are imported, even if not used in the UI
  productStatus?.known_affected?.forEach((id) => {
    mapProductStatus(id, 'known_affected')
  })
  productStatus?.fixed?.forEach((id) => {
    mapProductStatus(id, 'fixed')
  })
  productStatus?.first_fixed?.forEach((id) => {
    mapProductStatus(id, 'first_fixed')
  })
  productStatus?.first_affected?.forEach((id) => {
    mapProductStatus(id, 'first_affected')
  })
  productStatus?.known_not_affected?.forEach((id) => {
    mapProductStatus(id, 'known_not_affected')
  })
  productStatus?.last_affected?.forEach((id) => {
    mapProductStatus(id, 'last_affected')
  })
  productStatus?.recommended?.forEach((id) => {
    mapProductStatus(id, 'recommended')
  })
  productStatus?.under_investigation?.forEach((id) => {
    mapProductStatus(id, 'under_investigation')
  })

  return vulnerabilityProducts || []
}
