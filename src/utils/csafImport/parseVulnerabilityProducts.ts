import { TProductTreeBranch } from '@/routes/products/types/tProductTreeBranch'
import {
  getDefaultVulnerabilityProduct,
  TVulnerabilityProduct,
} from '@/routes/vulnerabilities/types/tVulnerabilityProduct'
import { TCSAFDocument } from '../csafExport/csafExport'
import { IdGenerator } from './idGenerator'
import { getParentPTB } from './utils'

export function parseVulnerabilityProducts(
  productStatus: TCSAFDocument['vulnerabilities'][number]['product_status'],
  idGenerator: IdGenerator,
  sosPtbs: TProductTreeBranch[],
): TVulnerabilityProduct[] {
  let vulnerabilityProducts: TVulnerabilityProduct[] = []
  const addVulnerabilityProduct = (
    productId: string,
    versionId: string,
    category: 'affected' | 'fixed',
  ) => {
    let previousVP = vulnerabilityProducts.find(
      (x) => x.productId === productId,
    )

    let newVP = previousVP
      ? previousVP
      : { ...getDefaultVulnerabilityProduct(), productId }

    if (category === 'affected') {
      newVP.firstAffectedVersionId = versionId
    } else {
      newVP.firstFixedVersionId = versionId
    }

    if (!previousVP) {
      vulnerabilityProducts.push(newVP)
    }
  }
  productStatus?.known_affected?.map((id) => {
    const ptbId = idGenerator.getId(id)
    const parentId = getParentPTB(ptbId, sosPtbs)?.id
    if (parentId) {
      addVulnerabilityProduct(parentId, ptbId, 'affected')
    }
  })

  productStatus?.fixed?.map((id) => {
    const ptbId = idGenerator.getId(id)
    const parentId = getParentPTB(ptbId, sosPtbs)?.id
    if (parentId) {
      addVulnerabilityProduct(parentId, ptbId, 'fixed')
    }
  })

  return vulnerabilityProducts || []
}
