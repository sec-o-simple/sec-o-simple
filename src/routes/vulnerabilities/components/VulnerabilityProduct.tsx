import { Autocomplete } from '@/components/forms/Autocomplete'
import IconButton from '@/components/forms/IconButton'
import Select from '@/components/forms/Select'
import { checkReadOnly, getPlaceholder } from '@/utils/template'
import { useProductTreeBranch } from '@/utils/useProductTreeBranch'
import { faTrash } from '@fortawesome/free-solid-svg-icons'
import { AutocompleteItem, AutocompleteSection } from '@heroui/react'
import { SelectItem } from '@heroui/select'
import { useTranslation } from 'react-i18next'
import {
  productStatus,
  TProductStatus,
  TVulnerabilityProduct,
} from '../types/tVulnerabilityProduct'

export type VulnerabilityProductProps = {
  vulnerabilityProduct: TVulnerabilityProduct
  onChange?: (updatedValue: TVulnerabilityProduct) => void
  onDelete?: (updatedValue: TVulnerabilityProduct) => void
}

export default function VulnerabilityProduct({
  vulnerabilityProduct,
  onChange,
  onDelete,
}: VulnerabilityProductProps) {
  const { getGroupedSelectableRefs } = useProductTreeBranch()
  const groupedSelectableRefs = getGroupedSelectableRefs()
  const { t } = useTranslation()

  return (
    <div className="border-default-200 flex items-end gap-2 rounded-md border bg-zinc-50 p-4">
      <Select
        label="Status"
        autoFocus
        selectionMode="single"
        selectedKeys={[vulnerabilityProduct.status]}
        onSelectionChange={(selected) => {
          onChange?.({
            ...vulnerabilityProduct,
            status: [...selected][0] as TProductStatus,
          })
        }}
        maxListboxHeight={300}
        className="w-[450px]"
      >
        {productStatus
          ?.filter((status) =>
            [
              'known_affected',
              'known_not_affected',
              'fixed',
              'under_investigation',
            ].includes(status),
          )
          .map((status) => (
            <SelectItem key={status}>
              {t(`vulnerabilities.products.status.${status}`)}
            </SelectItem>
          )) || <></>}
      </Select>

      <Autocomplete
        label={t('products.product.label')}
        selectedKey={vulnerabilityProduct.productId}
        height={600}
        onSelectionChange={(selected) => {
          if (!selected) return

          onChange?.({
            ...vulnerabilityProduct,
            productId: selected as string,
          })
        }}
        multiple
        isDisabled={checkReadOnly(vulnerabilityProduct, 'productId')}
        placeholder={getPlaceholder(vulnerabilityProduct, 'productId')}
      >
        {Object.keys(groupedSelectableRefs)?.map((rel) => (
          <AutocompleteSection
            key={rel}
            classNames={{
              heading:
                'sticky top-1 z-20 flex w-full rounded-small bg-default-100 px-2 py-1.5 shadow-small',
            }}
            title={t(`products.relationship.categories.${rel}`)}
          >
            {groupedSelectableRefs[rel]?.map((item) => (
              <AutocompleteItem
                classNames={{
                  title: 'text-wrap',
                }}
                key={item.full_product_name.product_id}
              >
                {item.full_product_name.name}
              </AutocompleteItem>
            ))}
          </AutocompleteSection>
        ))}
      </Autocomplete>

      <IconButton
        icon={faTrash}
        onPress={() => onDelete?.(vulnerabilityProduct)}
        isDisabled={checkReadOnly(vulnerabilityProduct)}
      />
    </div>
  )
}
