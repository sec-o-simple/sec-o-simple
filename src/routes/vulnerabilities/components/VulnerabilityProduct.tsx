import IconButton from '@/components/forms/IconButton'
import Select from '@/components/forms/Select'
import { checkReadOnly, getPlaceholder } from '@/utils/template'
import useDocumentStore from '@/utils/useDocumentStore'
import { faTrash } from '@fortawesome/free-solid-svg-icons'
import { SelectItem } from '@heroui/select'
import { useMemo } from 'react'
import { useTranslation } from 'react-i18next'
import {
  productStatus,
  TProductStatus,
  TVulnerabilityProduct,
} from '../types/tVulnerabilityProduct'
import useProducts from '../utils/useProducts'

export type VulnerabilityProductProps = {
  vulnerabilityProduct: TVulnerabilityProduct
  onChange?: (updatedValue: TVulnerabilityProduct) => void
  onDelete?: (updatedValue: TVulnerabilityProduct) => void
}

export default function VulnerabilityProduct({
  vulnerabilityProduct,
  onChange,
  onDelete,
}: VulnerabilityProductProps) {
  const { productDetails, getProductVersions } = useProducts()

  const { t } = useTranslation()
  const productVersions = useMemo(
    () => getProductVersions(vulnerabilityProduct.productId),
    [vulnerabilityProduct.productId, getProductVersions],
  )

  const globalRelationships = useDocumentStore((store) => store.relationships)

  return (
    <div className="flex items-end gap-2 rounded-md border border-default-200 bg-zinc-50 p-4">
      <Select
        label="Status"
        autoFocus
        selectionMode="single"
        selectedKeys={[vulnerabilityProduct.status]}
        onSelectionChange={(selected) => {
          onChange?.({
            ...vulnerabilityProduct,
            status: [...selected][0] as TProductStatus,
          })
        }}
        popoverProps={{
          className: 'w-72',
        }}
        maxListboxHeight={300}
      >
        {productStatus
          ?.filter((status) =>
            [
              'known_affected',
              'known_not_affected',
              'fixed',
              'under_investigation',
            ].includes(status),
          )
          .map((status) => (
            <SelectItem key={status}>
              {t(`vulnerabilities.products.status.${status}`)}
            </SelectItem>
          )) || <></>}
      </Select>
      {globalRelationships.length === 0 && (
        <>
          <Select
            label="Versions"
            selectionMode="multiple"
            selectedKeys={vulnerabilityProduct.versions}
            onSelectionChange={(selected) => {
              onChange?.({
                ...vulnerabilityProduct,
                versions: [...selected] as string[],
              })
            }}
          >
            {productVersions?.map((pv) => (
              <SelectItem key={pv.id}>{pv.name}</SelectItem>
            )) || <></>}
          </Select>
          <Select
            label="Product"
            selectedKeys={[vulnerabilityProduct.productId]}
            onSelectionChange={(selected) => {
              onChange?.({
                ...vulnerabilityProduct,
                productId: [...selected][0] as string,
                versions: [],
              })
            }}
            isDisabled={checkReadOnly(vulnerabilityProduct, 'productId')}
            placeholder={getPlaceholder(vulnerabilityProduct, 'productId')}
          >
            {productDetails.map((pd) => (
              <SelectItem key={pd.productId}>
                {pd.productName !== '' ? pd.productName : 'Untitled Product'}
              </SelectItem>
            ))}
          </Select>
        </>
      )}

      <Select
        label="Product"
        selectedKeys={[vulnerabilityProduct.productId]}
        onSelectionChange={(selected) => {
          onChange?.({
            ...vulnerabilityProduct,
            productId: [...selected][0] as string,
            versions: [],
          })
        }}
        isDisabled={checkReadOnly(vulnerabilityProduct, 'productId')}
        placeholder={getPlaceholder(vulnerabilityProduct, 'productId')}
      >
        {globalRelationships.map((pd) => (
          <SelectItem key={pd.name}>
            {pd.name !== '' ? pd.name : 'Untitled Product'}
          </SelectItem>
        ))}
      </Select>
      <IconButton
        icon={faTrash}
        onPress={() => onDelete?.(vulnerabilityProduct)}
        isDisabled={checkReadOnly(vulnerabilityProduct)}
      />
    </div>
  )
}
