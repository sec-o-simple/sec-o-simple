import IconButton from '@/components/forms/IconButton'
import Select from '@/components/forms/Select'
import { faTrash } from '@fortawesome/free-solid-svg-icons'
import { SelectItem } from '@heroui/select'
import { useMemo } from 'react'
import { TVulnerabilityProduct } from '../types/tVulnerabilityProduct'
import useProducts from '../utils/useProducts'
import { checkReadOnly, getPlaceholder } from '@/utils/template'

export type VulnerabilityProductProps = {
  vulnerabilityProduct: TVulnerabilityProduct
  onChange?: (updatedValue: TVulnerabilityProduct) => void
  onDelete?: (updatedValue: TVulnerabilityProduct) => void
}

export default function VulnerabilityProduct({
  vulnerabilityProduct,
  onChange,
  onDelete,
}: VulnerabilityProductProps) {
  const { productDetails, getProductVersions } = useProducts()

  const productVersions = useMemo(
    () => getProductVersions(vulnerabilityProduct.productId),
    [vulnerabilityProduct.productId, getProductVersions],
  )

  return (
    <tr>
      <td>
        <Select
          selectedKeys={[vulnerabilityProduct.productId]}
          onSelectionChange={(selected) => {
            onChange?.({
              ...vulnerabilityProduct,
              productId: [...selected][0] as string,
              firstAffectedVersionId: '',
              firstFixedVersionId: '',
            })
          }}
          isDisabled={checkReadOnly(vulnerabilityProduct, 'productId')}
          placeholder={getPlaceholder(vulnerabilityProduct, 'productId')}
        >
          {productDetails.map((pd) => (
            <SelectItem key={pd.productId}>{pd.productName}</SelectItem>
          ))}
        </Select>
      </td>
      <td>
        <Select
          selectedKeys={[vulnerabilityProduct.firstAffectedVersionId]}
          onSelectionChange={(selected) => {
            onChange?.({
              ...vulnerabilityProduct,
              firstAffectedVersionId: [...selected][0] as string,
            })
          }}
          isDisabled={checkReadOnly(
            vulnerabilityProduct,
            'firstAffectedVersionId',
          )}
          placeholder={getPlaceholder(
            vulnerabilityProduct,
            'firstAffectedVersionId',
          )}
        >
          {productVersions?.map((pv) => (
            <SelectItem key={pv.id}>{pv.name}</SelectItem>
          )) || <></>}
        </Select>
      </td>
      <td>
        <Select
          selectedKeys={[vulnerabilityProduct.firstFixedVersionId]}
          onSelectionChange={(selected) => {
            onChange?.({
              ...vulnerabilityProduct,
              firstFixedVersionId: [...selected][0] as string,
            })
          }}
          isDisabled={checkReadOnly(
            vulnerabilityProduct,
            'firstFixedVersionId',
          )}
          placeholder={getPlaceholder(
            vulnerabilityProduct,
            'firstFixedVersionId',
          )}
        >
          {productVersions?.map((pv) => (
            <SelectItem key={pv.id}>{pv.name}</SelectItem>
          )) || <></>}
        </Select>
      </td>
      <td className="flex justify-end">
        <IconButton
          icon={faTrash}
          onPress={() => onDelete?.(vulnerabilityProduct)}
          isDisabled={checkReadOnly(vulnerabilityProduct)}
        />
      </td>
    </tr>
  )
}
