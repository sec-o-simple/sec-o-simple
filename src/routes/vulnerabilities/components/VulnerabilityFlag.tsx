import IconButton from '@/components/forms/IconButton'
import Select from '@/components/forms/Select'
import { checkReadOnly, getPlaceholder } from '@/utils/template'
import { useProductTreeBranch } from '@/utils/useProductTreeBranch'
import { faTrash } from '@fortawesome/free-solid-svg-icons'
import { SelectItem, SelectSection } from '@heroui/select'
import { useTranslation } from 'react-i18next'
import {
  flagLabels,
  TVulnerabilityFlag,
  TVulnerabilityFlagLabel,
} from '../types/tVulnerabilityFlag'
import { useFieldValidation } from '@/utils/validation/useFieldValidation'
import { Alert } from '@heroui/react'

export type VulnerabilityFlagProps = {
  vulnerabilityFlag: TVulnerabilityFlag
  csafPath: string
  onChange?: (updatedValue: TVulnerabilityFlag) => void
  onDelete?: (updatedValue: TVulnerabilityFlag) => void
}

export default function VulnerabilityFlag({
  vulnerabilityFlag,
  onChange,
  onDelete,
  csafPath,
}: VulnerabilityFlagProps) {
  const { getGroupedSelectableRefs } = useProductTreeBranch()
  const groupedSelectableRefs = getGroupedSelectableRefs()
  const { t } = useTranslation()
  const validation = useFieldValidation(csafPath)

  return (
    <div className="border-default-200 flex flex-col gap-2 rounded-md border bg-zinc-50 p-4">
      {validation.hasErrors && (
        <Alert color="danger">
          {validation.errorMessages.map((m) => (
            <p key={m.path}>{m.message}</p>
          ))}
        </Alert>
      )}
      <div className="flex items-start gap-2">
        <Select
          label={t('vulnerabilities.flag.title')}
          autoFocus
          selectionMode="single"
          disallowEmptySelection
          selectedKeys={[vulnerabilityFlag.label]}
          isRequired
          onSelectionChange={(selected) => {
            onChange?.({
              ...vulnerabilityFlag,
              label: [...selected][0] as TVulnerabilityFlagLabel,
            })
          }}
          maxListboxHeight={300}
          className="w-[450px]"
        >
          {flagLabels?.map((label) => (
            <SelectItem key={label}>
              {t(`vulnerabilities.flag.${label}`)}
            </SelectItem>
          )) || <></>}
        </Select>

        <Select
          label={t('products.product.label_plural')}
          csafPath={`${csafPath}/product_ids`}
          selectedKeys={new Set(vulnerabilityFlag.productIds)}
          onSelectionChange={(selected) => {
            const selectedProductIds = [...selected].map((s) => s.toString())
            onChange?.({
              ...vulnerabilityFlag,
              productIds: selectedProductIds,
            })
          }}
          selectionMode="multiple"
          isDisabled={checkReadOnly(vulnerabilityFlag, 'productIds')}
          placeholder={getPlaceholder(vulnerabilityFlag, 'productIds')}
        >
          {Object.keys(groupedSelectableRefs)?.map((rel) => (
            <SelectSection
              key={rel}
              classNames={{
                heading:
                  'sticky top-1 z-20 flex w-full rounded-small bg-default-100 px-2 py-1.5 shadow-small',
              }}
              title={t(`products.relationship.categories.${rel}`)}
            >
              {groupedSelectableRefs[rel]?.map((item) => (
                <SelectItem
                  classNames={{
                    title: 'text-wrap',
                  }}
                  key={item.full_product_name.product_id}
                >
                  {item.full_product_name.name}
                </SelectItem>
              ))}
            </SelectSection>
          ))}
        </Select>

        <IconButton
          icon={faTrash}
          onPress={() => onDelete?.(vulnerabilityFlag)}
          isDisabled={checkReadOnly(vulnerabilityFlag)}
        />
      </div>
    </div>
  )
}
